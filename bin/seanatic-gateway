#!/usr/bin/bash

###########################################################################
# Copyright 2022 IoT.bzh
#
# author: Lefebvre Valentin <valentin.lefebvre@iot.bzh>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###########################################################################

###################
# UNSET VARIABLES #
###################                

unset START STOP
unset NO_SECURITY
unset PARSED_ARGUMENTS

unset AFM_DATA_DIR 
unset RP_USER
unset AFM_CMD

unset BINDING_REDIS
unset BINDING_MODBUS
unset BINDING_SIG_COMPOSER
unset BINDING_CLOUD_PUB

#################
# SET VARIABLES #
#################

AFM_DATA_DIR=/var/local/lib/afm/applications
RP_USER=rp-owner
AFM_CMD="runuser -u ${RP_USER} -- afm-util"

BINDING_REDIS=redis-tsdb-binding
BINDING_MODBUS=modbus-binding
BINDING_SIG_COMPOSER=signal-composer-binding
BINDING_CLOUD_PUB=cloud-publication-binding
BINDING_CLOUD_PUB_PORT=9996

#################
# HELP FUNCTION #
#################

# ---
# Print Usage
# ---
function usage {
    echo "$0 [ --start ][ --stop ][--no-security][ -h | --help ]
    - start: Start all gateway services
    - stop: Stop all services
    - no-security (optional): Use 'afb-binder' instead of 'afm-util'"
    exit 2
}

###################
# SETUP FUNCTIONS #
###################

# ---
# Setup the gateway
# Check if some systemd servies are running or not,
# and launched them if needed
# ---
function setup_gateway {
	[[ -f /var/log/redis/redis.log ]] || touch /var/log/redis/redis.log && chown redis:redis /var/log/redis/redis.log
	if (systemctl is-active --quiet redis.service); then
		echo "Service redis is running"
	else
		echo "Run and Enable service redis"
		systemctl enable redis
		systemctl start redis
	fi
}

######################
# SERVICES FUNCTIONS #
######################

# ---
# Start all services
# ---
function start_bindings {
	echo "Start gateway"
	if [[ ${NO_SECURITY} -eq 1 ]]; then
		# redis-tsdb-binding
		afb-binder -vvDn redis -p 9999 -w ${AFM_DATA_DIR}/${BINDING_REDIS}  \
-b lib/redis-binding.so --ws-server unix:@redis
		sleep 1

		# modbus-binding
		afb-binder -vvDn modbus -p 9998 -w ${AFM_DATA_DIR}/${BINDING_MODBUS} \
-b lib/afb-modbus.so --ws-server unix:@modbus
		sleep 1

		# signal-composer-binding
		afb-binder -vvDn afb-signal-composer -p 9997 -w ${AFM_DATA_DIR}/${BINDING_SIG_COMPOSER} \
-b lib/afb-signal-composer-binding.so \
--ws-client unix:@redis --ws-client unix:@modbus --ws-server unix:@signal-composer
		sleep 1

		# cloud-publication-binding
		afb-binder -vvDn afb-cloud-pub -p ${BINDING_CLOUD_PUB_PORT} -w ${AFM_DATA_DIR}/${BINDING_CLOUD_PUB} \
-b lib/cloud-publication.so \
--ws-client unix:@redis --ws-client unix:@redis-cloud --ws-server unix:@cloud-pub
		sleep 1

		# Start the publication
		afb-client --human 'localhost:9996/api' cloud-pub start &
		sleep 1
	else
		# redis-tsdb-binding
		echo "Launch ${BINDING_REDIS}"
		${AFM_CMD} start ${BINDING_REDIS} > /dev/null || { stop_bindings ; exit 1 ; }

		# modbus-binding
		echo "Launch ${BINDING_MODBUS}"
		${AFM_CMD} start ${BINDING_MODBUS} > /dev/null || { stop_bindings ; exit 1 ; }

		# signal-composer-binding
		echo "Launch ${BINDING_SIG_COMPOSER}"
		${AFM_CMD} start ${BINDING_SIG_COMPOSER} > /dev/null || { stop_bindings ; exit 1 ; }

		# cloud-publication-binding
		echo "Launch ${BINDING_CLOUD_PUB}"
		${AFM_CMD} start ${BINDING_CLOUD_PUB} > /dev/null || { stop_bindings ; exit 1 ; }

		# Get the cloud-publication port
		LIST=$(${AFM_CMD} list -a)
		for ((i = 0 ; i < $(echo ${LIST} | jq length) ; i++ )); do
			[[ '"'${BINDING_CLOUD_PUB}'"' == $(echo ${LIST} | jq .[${i}].id) ]] && { BINDING_CLOUD_PUB_PORT=$(echo ${LIST} | jq .[${i}].\"http-port\") ; echo "Port of ${BINDING_CLOUD_PUB} = ${BINDING_CLOUD_PUB_PORT}" ; continue ; }
		done
	fi

	# Start cloud publication
	afb-client --human "localhost:${BINDING_CLOUD_PUB_PORT}/api " cloud-pub start

}

# ---
# Stop all running services
# ---
function stop_bindings {
	echo "Stop gateway"
	if [[ ${NO_SECURITY} -eq 1 ]]; then
		killall -q redis modbus afb-signal-composer
	else
		# Get the cloud-publication port
		LIST=$(${AFM_CMD} list -a)
		for ((i = 0 ; i < $(echo ${LIST} | jq length) ; i++ )); do
			[[ '"'${BINDING_CLOUD_PUB}'"' == $(echo ${LIST} | jq .[${i}].id) ]] && { BINDING_CLOUD_PUB_PORT=$(echo ${LIST} | jq .[${i}].\"http-port\") ; echo "Port of ${BINDING_CLOUD_PUB} = ${BINDING_CLOUD_PUB_PORT}" ; continue ; }
		done
		# afb-client
		afb-client --human "localhost:${BINDING_CLOUD_PUB_PORT}/api" cloud-pub stop

		PS=$(${AFM_CMD} ps -a)
		for ((i = 0 ; i < $(echo ${PS} | jq length) ; i++ )); do
			# redis-tsdb-binding
			[[ '"'${BINDING_REDIS}'"' == $(echo ${PS} | jq .[${i}].id) ]] && { echo "Stop ${BINDING_REDIS}" ; ${AFM_CMD} kill $(echo ${PS} | jq .[${i}].runid) > /dev/null ; continue ; }

			# modbus-binding
			[[ '"'${BINDING_MODBUS}'"' == $(echo ${PS} | jq .[${i}].id) ]] && { echo "Stop ${BINDING_MODBUS}" ; ${AFM_CMD} kill $(echo ${PS} | jq .[${i}].runid) > /dev/null ; continue ; }

			# signal-composer-binding
			[[ '"'${BINDING_SIG_COMPOSER}'"' == $(echo ${PS} | jq .[${i}].id) ]] && { echo "Stop ${BINDING_SIG_COMPOSER}" ; ${AFM_CMD} kill $(echo ${PS} | jq .[${i}].runid) > /dev/null ; continue ; }

			# cloud-publication-binding
			[[ '"'${BINDING_CLOUD_PUB}'"' == $(echo ${PS} | jq .[${i}].id) ]] && { echo "Stop ${BINDING_CLOUD_PUB}" ; ${AFM_CMD} kill $(echo ${PS} | jq .[${i}].runid) > /dev/null ; continue ; }
		done
	fi
}

###############
# ENTRY POINT #
###############

[[ -z $@ ]] && usage
PARSED_ARGUMENTS=$(getopt -a -n $0 -o l:,h --long start,stop,no-security,help -- "$@")
[[ $? != "0" ]] && usage
eval set -- "${PARSED_ARGUMENTS}"

while :
do
	case "$1" in
		--start)		START=1   		; shift 1 ;;
		--stop)			STOP=1    		; shift 1 ;;
		--no-security)	NO_SECURITY=1	; shift 1 ;;
		-h | --help)	usage     		; shift   ;;
		--)				shift     		; break   ;;
		*)				usage     		; shift   ;;
	esac
done

[[ -z ${START} ]] && [[ -z ${STOP} ]] && usage
if [[ -z $STOP ]]; then
	setup_gateway
	start_bindings
else
	stop_bindings
fi

exit 0
